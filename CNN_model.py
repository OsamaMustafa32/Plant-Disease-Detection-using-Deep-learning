# -*- coding: utf-8 -*-
"""Project-CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16T66Rp-lzLoqoF4DiuLxLJskuvN_ZqZH
"""

import tensorflow as tf
from tensorflow import keras

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True,
                                   fill_mode='nearest')

from google.colab import drive
drive.mount('/content/drive')

test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory('/content/drive/MyDrive/Dataset/Train/Train',
                                                 target_size = (64, 64),
                                                 batch_size = 32,
                                                 class_mode = 'categorical')

test_set = test_datagen.flow_from_directory('/content/drive/MyDrive/Dataset/Test/Test',
                                            target_size = (64, 64),
                                            batch_size = 32,
                                            class_mode = 'categorical')

cnn = tf.keras.models.Sequential()

cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=[64, 64, 3]))
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))

cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu'))
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))

cnn.add(tf.keras.layers.Conv2D(filters=48, kernel_size=3, activation='relu'))
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))

cnn.add(tf.keras.layers.Flatten())

cnn.add(tf.keras.layers.Dense(units=128, activation='relu'))

cnn.add(tf.keras.layers.Dense(units=3, activation='softmax'))

optimizer=keras.optimizers.Adam(learning_rate=0.001)

cnn.compile(optimizer =optimizer , loss = 'categorical_crossentropy', metrics = ['accuracy'])

cnn.fit(training_set,validation_data=test_set,epochs=30)

from tensorflow.keras.models import load_model
cnn.save("/content/drive/MyDrive/Dataset/trainedmodelCnn_plant.h5")

conv=tf.keras.models.load_model('/content/drive/MyDrive/Dataset/trainedmodelCnn_plant.h5')

import cv2
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import numpy as np
class_names = ['Healthy','Powdery','Rust']
def predictClass(filepath):
  img1 = image.load_img(filepath, target_size = (64,64))
  plt.imshow(img1)
  Y = image.img_to_array(img1, dtype=int)
  X = np.expand_dims(Y, axis=0)
  result = conv.predict(X)
  index = np.argmax(result)
  #print(index)
  print("Predicted condition: ", class_names[index])
predictClass("/content/drive/MyDrive/Dataset/Validation/Validation/Healthy/9c077ad23a231abb.jpg")